package security;
 
import security.PermissionCheck;
import models.Person;
import models.Office;
import models.UsersRolesOffices;
import models.Permission;

global models.User currentOperator;

/*  
 *	Azioni eseguibili solo per le persone fisiche
 */
rule IsPerson
when
 $c: PermissionCheck(action in (
     	
     	/* Drools Test */
     	"TestDrools.youMustBeLoggedIn",
     	"TestDrools.youMustBe",
     	
     	/* Situazione Mensile */
     	"Stampings.stampings",
     	
     	/* Assenze mensili */
     	"Absences.absences",
     	"Absences.absenceInMonth",

     	/* Assenze annuali */
     	"YearlyAbsences.absencesPerPerson",
     	
     	/* Ferie */
     	"Vacations.show",
     	"Vacations.permissionCurrentYear",
     	"Vacations.vacationsCurrentYear",
       	"Vacations.vacationsLastYear",
  
     	/* Competenze */
     	"Competences.competences",
     	
     	/* Riepilogo orario*/
     	"PersonMonths.hourRecap",
     	
     	/* Ore di formazione */
     	"PersonMonths.trainingHours",
     	"PersonMonths.deleteTrainingHours",
     	"PersonMonths.deleteTrainingHoursConfirmed",
     	"PersonMonths.insertTrainingHours",
     	"PersonMonths.modifyTrainingHours",
     	"PersonMonths.saveTrainingHours",
     	"PersonMonths.updateTrainingHours",
     	
     	/* Modifica password */
     	"Persons.changePassword",
     	"Persons.savePassword",
     	
     	/* Lista Persone */
     	"Persons.showCurrentVacation",
     	"Persons.showCurrentContractWorkingTimeType",
     	"Persons.update",
     	"Persons.deletePerson",
     	"Persons.deletePersonConfirmed",
     	"Persons.insertContract",
     	"Persons.saveContract",
     	"Persons.modifyContract",
     	"Persons.updateContract",
     	"Persons.deleteContract",
     	"Persons.deleteContractConfirmed",
     	"Persons.updateSourceContract",
     	"Persons.saveSourceContract",
     	"Persons.updateContractWorkingTimeType",
     	"Persons.changeTypeOfContractWorkingTimeType",
     	"Persons.splitContractWorkingTimeType",
     	"Persons.deleteContractWorkingTimeType",
     	
     	/*Assenze*/
     	"YearlyAbsences.showGeneralMonthlyAbsences",
     	"YearlyAbsences.showPersonMonthlyAbsences",
     	"YearlyAbsences.yearlyAbsences",
     	"Absences.manageAttachmentsPerCode",
     	"Absences.manageAttachmentsPerPerson",
     	"Absences.absenceInPeriod",
     	
     	/*Competenze*/
     	"Competences.showCompetences",
     	"Competences.updateCompetence",
     	"Competences.overtime",
     	"Competences.totalOvertimeHours",
     	"Competences.saveOvertime",
     	"Competences.enabledCompetences",
     	"Competences.updatePersonCompetence",
     	"Competences.saveNewCompetenceConfiguration",
     	"Competences.exportCompetences",
     	"Competences.getOvertimeInYear",
     	
     	/*Ferie e permessi*/
     	"VacationsAdmin.list",
     	"VacationsAdmin.vacationsLastYear",
     	"VacationsAdmin.vacationsCurrentYear",
     	"VacationsAdmin.permissionCurrentYear",
     	
     	/*Timbrature*/
     	"Stampings.personStamping",
     	"Stampings.missingStamping",
     	"Stampings.dailyPresence",
     	"Stampings.mealTicketSituation",
     	
     	/*Riepilogo mensile*/
     	"MonthRecaps.show",
     	"MonthRecaps.justifiedAbsences",
     	"MonthRecaps.notJustifiedAbsences",
        "MonthRecaps.workingDayNotHoliday",
        "MonthRecaps.workingDayHoliday",
        
        /*Invio attestati*/
        "UploadSituation.show",
        "UploadSituation.uploadSituation",
        "UploadSituation.loginAttestati",
        "UploadSituation.processAttestati"
     	
     	), target == null, granted == false)
 $u: User(person != null)
then
 $c.grant();
end


/*
 *		Permission: viewPerson
 */
rule viewPerson_Generic
when 
 $uro: UsersRolesOffices(user == currentOperator) from currentOperator.usersRolesOffices
 $p: Permission(description == "viewPerson") from $uro.role.permissions
 $c: PermissionCheck(action in (
        "Persons.list"
        ), target == null, granted == false)
then
 $c.grant();
end

rule viewPerson_InOffice
when
 $o: Office()
 $uro: UsersRolesOffices(user == currentOperator) from $o.usersRolesOffices
 $p: Permission(description == "viewPerson") from $uro.role.permissions
 $c: PermissionCheck(action in (
       "Persons.edit",
       "Persons.showCurrentVacation",
       "Persons.showCurrentContractWorkingTimeType"
       ), target == $o, granted == false)
then
 $c.grant();
end

rule viewPerson_Item
when
 $uro: UsersRolesOffices(user == currentOperator) from currentOperator.usersRolesOffices
 $p: Permission(description == "viewPerson") from $uro.role.permissions
 $c: PermissionCheck(target == "viewPerson", granted == false)
then
 $c.grant();
end

/*
 *		Permission: editPerson
 */
rule editPerson_Generic
when 
 $uro: UsersRolesOffices(user == currentOperator) from currentOperator.usersRolesOffices
 $p: Permission(description == "editPerson") from $uro.role.permissions
 $c: PermissionCheck(action in (
        /* inserire le action interessate */
        "Epas.action"     	
        ), target == null, granted == false)
then
 $c.grant();
end

rule editPerson_InOffice
when
 $o: Office()
 $uro: UsersRolesOffices(user == currentOperator) from $o.usersRolesOffices
 $p: Permission(description == "editPerson") from $uro.role.permissions
 $c: PermissionCheck(action in (
        /* inserire le action interessate */
        "Persons.update",
        "Persons.deletePerson",
     	"Persons.deletePersonConfirmed",
     	"Persons.insertContract",
        "Persons.saveContract",
        "Persons.modifyContract",
     	"Persons.updateContract",
     	"Persons.deleteContract",
     	"Persons.deleteContractConfirmed",
     	"Persons.updateSourceContract",
     	"Persons.saveSourceContract",
     	"Persons.updateContractWorkingTimeType",
     	"Persons.changeTypeOfContractWorkingTimeType",
     	"Persons.splitContractWorkingTimeType",
     	"Persons.deleteContractWorkingTimeType"
       ), target == $o, granted == false)
then
 $c.grant();
end

rule editPerson_Item
when
 $uro: UsersRolesOffices(user == currentOperator) from currentOperator.usersRolesOffices
 $p: Permission(description == "editPerson") from $uro.role.permissions
 $c: PermissionCheck(target == "editPerson", granted == false)
then
 $c.grant();
end

/*
 *		Permission: viewPersonDay
 */
rule viewPersonDay_Generic
when 
 $uro: UsersRolesOffices(user == currentOperator) from currentOperator.usersRolesOffices
 $p: Permission(description == "viewPersonDay") from $uro.role.permissions
 $c: PermissionCheck(  action in (
        /* inserire le action interessate */
        "YearlyAbsences.showGeneralMonthlyAbsences",
        "YearlyAbsences.yearlyAbsences",
        "Absences.manageAttachmentsPerCode",
        "VacationsAdmin.list",
        "Stampings.missingStamping",
        "Stampings.dailyPresence",
        "Stampings.mealTicketSituation",
        "MonthRecaps.show"
        ), target != null, granted == false)
then
 $c.grant();
end

rule viewPersonDay_InOffice
when
 $o: Office()
 $uro: UsersRolesOffices(user == currentOperator) from $o.usersRolesOffices
 $p: Permission(description == "viewPersonDay") from $uro.role.permissions
 $c: PermissionCheck(action in (
        /* inserire le action interessate */
        "YearlyAbsences.showPersonMonthlyAbsences",
        "Absences.manageAttachmentsPerPerson",
        "Absences.absenceInPeriod",
        "VacationsAdmin.vacationsLastYear",
        "VacationsAdmin.vacationsCurrentYear",
        "VacationsAdmin.permissionCurrentYear",
        "Stampings.personStamping",
        "MonthRecaps.justifiedAbsences",
        "MonthRecaps.notJustifiedAbsences",
        "MonthRecaps.workingDayNotHoliday",
        "MonthRecaps.workingDayHoliday"
       ), target == $o, granted == false)
then
 $c.grant();
end

rule viewPersonDay_Item
when
 $uro: UsersRolesOffices(user == currentOperator) from currentOperator.usersRolesOffices
 $p: Permission(description == "viewPersonDay") from $uro.role.permissions
 $c: PermissionCheck(target == "viewPersonDay", granted == false)
then
 $c.grant();
end

/*
*		Permission: viewCompetence
*/
rule viewCompetence_Generic
when 
 $uro: UsersRolesOffices(user == currentOperator) from currentOperator.usersRolesOffices
 $p: Permission(description == "viewCompetence") from $uro.role.permissions
 $c: PermissionCheck(action in (
        /* inserire le action interessate */
        "Competences.showCompetences",
        "Competences.overtime",
        "Competences.totalOvertimeHours",
        "Competences.enabledCompetences",
        "Competences.exportCompetences",
        "Competences.getOvertimeInYear"
        ), target != null, granted == false)
then
 $c.grant();
end

/*
 *		Item per visualizzazione dropdown menu
 */
rule viewCompetence_Item
when
 $uro: UsersRolesOffices(user == currentOperator) from currentOperator.usersRolesOffices
 $p: Permission(description == "viewCompetence") from $uro.role.permissions
 $c: PermissionCheck(target == "viewCompetence", granted == false)
then
 $c.grant();
end

/*
 *		Permission: editCompetence
 */
rule editCompetence_InOffice
when
 $o: Office()
 $uro: UsersRolesOffices(user == currentOperator) from $o.usersRolesOffices
 $p: Permission(description == "editCompetence") from $uro.role.permissions
 $c: PermissionCheck(action in (
        /* inserire le action interessate */
        "Competences.updateCompetence",
        "Competences.saveOvertime",
        "Competences.updatePersonCompetence",
        "Competences.saveNewCompetenceConfiguration"
       ), target == $o, granted == false)
then
 $c.grant();
end

/*
 *		Permissio: uploadSituation in office
 */
rule uploadSituation_InOffice
when
 $o: Office()
 $uro: UsersRolesOffices(user == currentOperator) from $o.usersRolesOffices
 $p: Permission(description == "uploadSituation") from $uro.role.permissions
 $c: PermissionCheck(action in (
        /* inserire le action interessate */
        "UploadSituation.show",
        "UploadSituation.uploadSituation",
        "UploadSituation.loginAttestati",
        "UploadSituation.processAttestati"
       ), target == $o, granted == false)
then
 $c.grant();
end

/*
 * 		Item per visualizzazione dropdown menu
 */
rule uploadSituation_Item
when
 $uro: UsersRolesOffices(user == currentOperator) from currentOperator.usersRolesOffices
 $p: Permission(description == "uploadSituation") from $uro.role.permissions
 $c: PermissionCheck(target == "uploadSituation", granted == false)
then
 $c.grant();
end


/*
 *		Permission: viewOffice
 */
rule viewOffice_Generic
when 
 $uro: UsersRolesOffices(user == currentOperator) from currentOperator.usersRolesOffices
 $p: Permission(description == "viewOffice") from $uro.role.permissions
 $c: PermissionCheck(action in (
        /* inserire le action interessate */
        "Epas.action"
        ), target == null, granted == false)
then
 $c.grant();
end

rule viewOffice_InOffice
when
 $o: Office()
 $uro: UsersRolesOffices(user == currentOperator) from $o.usersRolesOffices
 $p: Permission(description == "viewOffice") from $uro.role.permissions
 $c: PermissionCheck(action in (
        /* inserire le action interessate */
        "Epas.action"
       ), target == $o, granted == false)
then
 $c.grant();
end

rule viewOffice_Item
when
 $uro: UsersRolesOffices(user == currentOperator) from currentOperator.usersRolesOffices
 $p: Permission(description == "viewOffice") from $uro.role.permissions
 $c: PermissionCheck(target == "viewOffice", granted == false)
then
 $c.grant();
end


/*
 *		Permission: editOffice
 */
rule editOffice_Generic
when 
 $uro: UsersRolesOffices(user == currentOperator) from currentOperator.usersRolesOffices
 $p: Permission(description == "editOffice") from $uro.role.permissions
 $c: PermissionCheck(action in (
        /* inserire le action interessate */
        "Epas.action"
        ), target == null, granted == false)
then
 $c.grant();
end

rule editOffice_InOffice
when
 $o: Office()
 $uro: UsersRolesOffices(user == currentOperator) from $o.usersRolesOffices
 $p: Permission(description == "editOffice") from $uro.role.permissions
 $c: PermissionCheck(action in (
        /* inserire le action interessate */
        "Offices.insertInstitute",
        "Offices.saveInstitute",
        "Offices.insertSeat",
        "Offices.saveSeat",
        "Offices.editSeat",
        "Offices.updateSeat"
       ), target == $o, granted == false)
then
 $c.grant();
end

rule editOffice_Item
when
 $uro: UsersRolesOffices(user == currentOperator) from currentOperator.usersRolesOffices
 $p: Permission(description == "editOffice") from $uro.role.permissions
 $c: PermissionCheck(target == "editOffice", granted == false)
then
 $c.grant();
end

/*
 *		Schema da implementare per ogni permesso
 *		Permission: nomePermesso

rule nomePermesso_Generic
when 
 $uro: UsersRolesOffices(user == currentOperator) from currentOperator.usersRolesOffices
 $p: Permission(description == "nomePermesso") from $uro.role.permissions
 $c: PermissionCheck(action in (
        /* inserire le action interessate *//*
        "Epas.action"
        ), target == null, granted == false)
then
 $c.grant();
end

rule nomePermesso_InOffice
when
 $o: Office()
 $uro: UsersRolesOffices(user == currentOperator) from $o.usersRolesOffices
 $p: Permission(description == "nomePermesso") from $uro.role.permissions
 $c: PermissionCheck(action in (
        /* inserire le action interessate *//*
        "Epas.action"
       ), target == $o, granted == false)
then
 $c.grant();
end

rule nomePermesso_Item
when
 $uro: UsersRolesOffices(user == currentOperator) from currentOperator.usersRolesOffices
 $p: Permission(description == "nomePermesso") from $uro.role.permissions
 $c: PermissionCheck(target == "nomePermesso", granted == false)
then
 $c.grant();
end

 */














