package security;
 
import security.PermissionCheck;
import models.Office;
import models.UsersRolesOffices;
import models.ShiftType;
import models.Person;
import models.Role;

global models.User currentOperator;


/* Metodi senza regole
*
*  Administration.createOvertimeFile
*  JsonExport.activePersons
*
*
*
*/

rule AnyUser when
  $c: PermissionCheck(action in (
     	"Application.index",
     	"Version.showVersion"
       ), target == null, granted == false)
then
 $c.grant();
end

/*  
 *	Azioni eseguibili dagli impiegati per visualizzare la propria situazione.
 *  (Ricalca il più possibile la struttura del dropdown menu della persona 
 *  oltre i calendari iCal e le azioni REST)
 */
rule IsEmployee
when
  $uro: UsersRolesOffices()
  $r: Role(name == "employee") from $uro.role
  $c: PermissionCheck(action in (
  		/* Ritorna allo user developer */
     	"Administrators.restoreUser",
     	
     	/* Situazione Mensile */
     	"Stampings.stampings",
     	"Stampings.dailyPresenceForPersonInCharge",
     	/* "Stampings.editEmployee", 
     	"Stampings.updateEmployee", */
     	
     	/* Assenze mensili */
     	"Absences.absences",
     	"Absences.absenceInMonth",
     	
     	/* Assenze annuali */
     	"Absences.absencesPerPerson",
     	
     	/* Ferie */
     	"Vacations.show",
     	"Vacations.permissionCurrentYear",
     	"Vacations.vacationsCurrentYear",
       	"Vacations.vacationsLastYear",
       	
       	/* Competenze */
     	"Competences.competences",
     	"Competences.monthlyOvertime",
       	
       	/* Riepilogo orario*/
     	"PersonMonths.hourRecap",
     	
     	/* Ore di formazione */
     	"PersonMonths.trainingHours",
     	"PersonMonths.deleteTrainingHours",
     	"PersonMonths.deleteTrainingHoursConfirmed",
     	"PersonMonths.insertTrainingHours",
     	"PersonMonths.insertTrainingHoursPreviousMonth",
     	"PersonMonths.modifyTrainingHours",
     	"PersonMonths.saveTrainingHours",
     	"PersonMonths.updateTrainingHours",
     	
     	/* Modifica password */
     	"Persons.changePassword",
     	"Persons.savePassword",
     	"Persons.resetPassword",
     	
     	/* Stampa cartellino */
     	"PrintTags.showPersonTag",
     	
     	/* 
     	 * Visualizzazione eventuali turni via iCal
     	 * dentro il metodo controllare il permesso di
     	 * visualizzare il calendario specifico richiesto
     	 */
     	"Shift.iCal",
     	"Reperibility.iCal", 
     	
     	/* Metodi rest */
     	"rest.PersonDays.getDaySituation",
     	"rest.PersonDays.getMonthSituation",
     	
     	/* Timbrature web */
     	"Clocks.daySituation",
     	"Clocks.webStamping",
     	"Clocks.insertWebStamping",
     	
     	/*Possibilità di inviare report*/
     	"ReportCentre.generateReport",
     	"ReportCentre.sendProblem"   	
     	
       ), target == null, granted == false)
then
 $c.grant();
end

/* Azioni eseguibili da qualsiasi utente che abbiano come destinatario 
 * dell'azione se stesso
 */
 
rule HasRightOnHimself
when
  $p: Person(this == currentOperator.person)
  $c: PermissionCheck(target == $p, granted == false)
then
 $c.grant();
end


/* Consente agli amministratori e agli amministratori in sola lettura di avere
 * diritti di visualizzazione su situazioni relative a una specifica persona che
 * appartiene allo stesso ufficio dell'amministratore 
 */
 
rule HasRightOnPerson
when
  $uro: UsersRolesOffices(role.name in("personnelAdmin","personnelAdminMini"))
  $o: Office() from $uro.office
  $c: PermissionCheck($o.persons contains target, granted == false)
then
 $c.grant();
end
  

/*******************************************************************************
 * Azioni utente DEVELOPER
 ******************************************************************************/
rule Developer
when
 $uro: UsersRolesOffices()
 Role(name == "developer") from $uro.role
 $c: PermissionCheck( granted == false)
then
 $c.grant();
end

/*******************************************************************************
 * Azioni utente ADMIN
 ******************************************************************************/
rule Admin_Generic
when
 $uro: UsersRolesOffices()
 $p: Role(name == "admin") from $uro.role
 $c: PermissionCheck(action in (
 
 		"Offices.editSeat",
        "Offices.saveSeat",
        "Offices.insertSeat",
        "Offices.saveInstitute",
        "Offices.editInstitute",
        "Offices.insertInstitute",
        "Offices.insertArea",
        "Offices.showOffices",
        
        "Administrators.blank",
        "Administrators.save",
        "Administrators.delete",
        "Administrators.deleteSelfAsAdministrator",
        "Administrators.insertAccountSystem",
        "Administrators.saveAccountSystem",
        "Administrators.deleteAccountSystem",

		/* duplicate */
		"Configurations.showConfGeneral",
		"Configurations.showConfYear",
		"Configurations.showConfPeriod",
        "Configurations.saveConfGeneral",
        "Configurations.saveConfYear",
        "Configurations.insertNewConfYear",
        "Configurations.saveNewConfYear",
		"Configurations.savePastYearVacationLimit",
		"Configurations.savePatron",

        "Import.officeList",

        "Persons.list",
        "Persons.edit",
        "Persons.update",
        "Persons.save",
        "Persons.insertPerson",
     	"Persons.insertUsername",
     	"Persons.updateUsername",
        "Persons.deletePerson",
     	"Persons.deletePersonConfirmed",
     	
     	"Contracts.personContracts",
     	
     	"WorkingTimes.manageWorkingTime",
     	"WorkingTimes.manageOfficeWorkingTime",
     	"WorkingTimes.showHorizontal",
     	"WorkingTimes.showContract",
     	"WorkingTimes.showContractWorkingTimeType"          

 		), target == null, granted == false)
 then
 $c.grant();
end

rule Admin_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Role(name == "admin") from $uro.role
 $c: PermissionCheck(action in (
 	
 	    "Configurations.saveConfGeneral",
        "Configurations.saveConfYear",
        "Configurations.insertNewConfYear",
        "Configurations.saveNewConfYear",
        "Configurations.savePastYearVacationLimit",
        "Configurations.savePatron",
        
        "Persons.edit",
        "Persons.update",
        "Persons.save",
        "Persons.insertUsername",
        "Persons.updateUsername",
        "Persons.deletePerson",
        "Persons.deletePersonConfirmed",
        
        "Contracts.personContracts",
        
        "WorkingTimes.manageWorkingTime",
        "WorkingTimes.manageOfficeWorkingTime",
        "WorkingTimes.showHorizontal",
     	"WorkingTimes.showContract",
     	"WorkingTimes.showContractWorkingTimeType"             
               
       ), target == $o, granted == false)
then
 $c.grant();
end

/*******************************************************************************
 * Azioni utente con ruolo TECNICAL_ADMIN
 ******************************************************************************/
rule TecnicalAdmin_Generic
when 
 $uro: UsersRolesOffices()
 $p: Role(name == "tecnicalAdmin") from $uro.role
 $c: PermissionCheck(action in (

        "Institutes.list",
        "Institutes.index",
        
        /* duplicate prima di avere il contesto office */
		"Institutes.edit",
		"Institutes.save",
		"Institutes.delete",

		"Offices.list",
		"Offices.edit",
		"Offices.save",
		"BadgeReaders.edit",
		"BadgeReaders.list",
		"BadgeReaders.joinOffice",
		"BadgeReaders.saveJoinOffice",
	    "BadgeReaders.unjoinOffice",
	    "BadgeReaders.index",
		
		"Badges.joinPersonToBadge",
		"Badges.allocateBadge",
		"Badges.delete",
		"Badges.deleteBadge",
		
		"Administrators.blank",
		"Administrators.save",
		"Administrators.delete"
		
        ), target == null, granted == false)
then
 $c.grant();
end

rule TecnicalAdmin_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Role(name == "tecnicalAdmin") from $uro.role
 $c: PermissionCheck(action in (
 
 	   "Institutes.edit",
 	   "Institutes.save",
	   "Institutes.delete",
	   "Offices.edit",
	   "Offices.save",
	   "Administrators.blank",
	   "Administrators.delete",
	   "Administrators.save",
	   "BadgeReaders.edit",
	   "BadgeReaders.joinOffice",
	   "BadgeReaders.saveJoinOffice",
	   "BadgeReaders.unjoinOffice",
	   "BadgeReaders.index",
	   
	   "Badges.joinPersonToBadge",
	   "Badges.allocateBadge",
	   "Badges.delete",
	   "Badges.deleteBadge"
	   
	   
       ), target == $o, granted == false)
then
 $c.grant();
end


/*******************************************************************************
 * Azioni utente con ruolo almeno PERSONNEL_ADMIN_MINI
 ******************************************************************************/

rule AtLeastPersonnelAdminMini_Generic
when 
 $uro: UsersRolesOffices()
 $p: Role(name in ("personnelAdmin","personnelAdminMini")) from $uro.role
 $c: PermissionCheck(action in (
        
        /* Vecchio permesso viewPerson */
        "Persons.list",
        "Persons.edit",
        "Persons.children",

        "Badges.joinPersonToBadge",
        
        "MealTickets.recapMealTickets",
        "MonthRecaps.showRecaps",
        "MonthRecaps.customRecap",
        
        /* Vecchio permesso viewPersonDay */
 		"MonthRecaps.show",
 		
 		"Stampings.missingStamping",
        "Stampings.dailyPresence",
        "Stampings.mealTicketSituation",
        
        /* Vecchio permesso viewCompetence */
        "Competences.exportCompetences",
        "Competences.getOvertimeInYear",
        "Competences.approvedCompetenceInYear",
        
        /* Vecchio permesso viewOffice 
         *  In questo caso le action non sono inserite all'interno della regola
         *  InOffice poichè i filtri sono all'interno delle stesse action.
         *  TODO rifattorizzare tutte le action di Institutes e Offices
         */
        "Offices.showOffices",
        "Institutes.list",
        
        
        "Configurations.showConfGeneral",
        "Configurations.showConfYear",
        
        /* Vecchio permesso viewCompetenceCode */
        "Competences.manageCompetenceCode",
        
       
        /*********** duplicate prima di avere il contesto office  *************/
        
        /* Vecchio permesso viewPerson */
        "Persons.showCurrentVacation",
        "Persons.showCurrentContractWorkingTimeType",
        
        "Stampings.holidaySituation",
        "Stampings.personHolidaySituation",
        
        /* Vecchio permesso viewPersonDay */
        "Absences.manageAttachmentsPerPerson",
        "Absences.downloadAttachment",
        "Absences.zipAttachment",
        "Absences.absenceInPeriod",
		"Absences.showPersonMonthlyAbsences",
		"Absences.showGeneralMonthlyAbsences",
		"Absences.manageAttachmentsPerCode",
        "Absences.yearlyAbsences",

        "Contracts.personContracts",
		 
		"Charts.indexCharts",
        "Charts.checkLastYearAbsences",
        "Charts.whichAbsenceInYear",
     	"Charts.overtimeOnPositiveResidual",
     	"Charts.overtimeOnPositiveResidualInYear",
     	"Charts.exportHourAndOvertime",
     	"Charts.export",
     	"Charts.processLastYearAbsences",
     	"Charts.exportDataSituation",
     	"Charts.exportFinalSituation",
		
		"PrintTags.listPersonForPrintTags",
        "PrintTags.showTag",
		        
        "Stampings.personStamping",

		"VacationsAdmin.list",        
        "VacationsAdmin.vacationsLastYear",
        "VacationsAdmin.vacationsCurrentYear",
        "VacationsAdmin.permissionCurrentYear",
        
       
        
        /* Vecchio permesso viewCompetence */
        "Competences.showCompetences",
        "Competences.overtime",
        "Competences.totalOvertimeHours",
        "Competences.enabledCompetences",
        "Competences.approvedCompetenceInYear",
        
        /* Vecchio permesso viewWorkingTimeType */
        "WorkingTimes.manageWorkingTime",
        "WorkingTimes.manageOfficeWorkingTime",
        "WorkingTimes.showWorkingTimeType",
        "WorkingTimes.showContractWorkingTimeType",		
        "WorkingTimes.showContract",
        "WorkingTimes.showHorizontal"				

        ), target == null, granted == false)
then
 $c.grant();
end

rule AtLeastPersonnelAdminMini_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Role(name in ("personnelAdmin","personnelAdminMini")) from $uro.role
 $c: PermissionCheck(action in (
 	
 	   /* Vecchio permesso viewPerson */
 	   "Persons.edit",
 	   "Persons.showCurrentVacation",
       "Persons.showCurrentContractWorkingTimeType",
       
       "MealTickets.recapMealTickets",
       
       "Stampings.holidaySituation",
       "Stampings.personHolidaySituation",	
       
       /* Vecchio permesso viewPersonDay */
   	    "Absences.absenceInPeriod",
	    "Absences.showPersonMonthlyAbsences",
	    "Absences.showGeneralMonthlyAbsences",
        "Absences.yearlyAbsences",
        "Absences.manageAttachmentsPerPerson",
        "Absences.manageAttachmentsPerCode",
        "Absences.downloadAttachment",
        "Absences.zipAttachment",

		"Contracts.personContracts",

		"Charts.indexCharts",
        "Charts.checkLastYearAbsences",
        "Charts.whichAbsenceInYear",
     	"Charts.overtimeOnPositiveResidual",
     	"Charts.overtimeOnPositiveResidualInYear",
     	"Charts.exportHourAndOvertime",
     	"Charts.export",
     	"Charts.processLastYearAbsences",
     	"Charts.exportDataSituation",
     	"Charts.exportFinalSituation",
		
        "MonthRecaps.showRecaps",
        "MonthRecaps.customRecap",
        "PrintTags.listPersonForPrintTags",
        "PrintTags.showTag",
		
        "Stampings.personStamping",
        "Stampings.dailyPresence",
        "Stampings.missingStamping",
        
        "VacationsAdmin.list",
        "VacationsAdmin.vacationsLastYear",
        "VacationsAdmin.vacationsCurrentYear",
        "VacationsAdmin.permissionCurrentYear",
        

        
        /* Vecchio permesso viewCompetence */
        "Competences.showCompetences",
        "Competences.overtime",
        "Competences.totalOvertimeHours",
        "Competences.enabledCompetences",
        "Competences.approvedCompetenceInYear",
        
        /* Vecchio permesso viewWorkingTimeType */
        "WorkingTimes.manageWorkingTime",
        "WorkingTimes.manageOfficeWorkingTime",
        "WorkingTimes.showWorkingTimeType",
        "WorkingTimes.showContractWorkingTimeType",		
        "WorkingTimes.showContract",
        "WorkingTimes.showHorizontal"				
               
       ), target == $o, granted == false)
then
 $c.grant();
end

/*******************************************************************************
 * Azioni utente con ruolo solo PERSONNEL_ADMIN
 ******************************************************************************/

rule OnlyForPersonnelAdmin_Generic
when 
 $uro: UsersRolesOffices()
 $p: Role(name == "personnelAdmin") from $uro.role
 $c: PermissionCheck(action in (
 		
 		/* Vecchio permesso editPerson */
        "Persons.insertPerson",
		
		/* Vecchio permesso editAbsenceCode */
		/* FIXME: stesso ragionamento del editCompetenceCode vedi sotto */
		"Absences.manageAbsenceCode",
        
		/*********** duplicate prima di avere il contesto office  *************/   

		/* Vecchio permesso editPerson */
        "Persons.edit",
        "Persons.update",
        "Persons.save",
     	"Persons.insertUsername",
     	"Persons.updateUsername",
        "Persons.deletePerson",
     	"Persons.deletePersonConfirmed",
        
        "Contracts.personContracts",
        "Contracts.insert",
        "Contracts.save",
        "Contracts.edit",
        "Contracts.update",
        "Contracts.delete",
        
        "Contracts.updateSourceContract",
     	"Contracts.saveResidualSourceContract",
     	"Contracts.saveMealTicketSourceContract",
		"Contracts.updateContractStampProfile",
        "Contracts.saveContractStampProfile",
        "Contracts.updateContractWorkingTimeType",
        "Contracts.saveContractWorkingTimeType",
     	
     	"Persons.children",
     	"Persons.editChild",
     	"Persons.saveChild",
     	"Persons.insertChild",
     	"Persons.deleteChild",
     	
     	"Persons.workGroup",
     	"Persons.confirmGroup",
     	"Persons.removePersonFromGroup",
     	
     	"Persons.updateContractStampProfile",
     	"Persons.splitContractStampProfile",
     	"Persons.changeTypeOfContractStampProfile",
     	"Persons.deleteContractStampProfile",
     	
     	"Persons.modifySendEmail",
     	"Persons.updateSendEmail",
     	
     	"MealTickets.submitPersonMealTicket",
        "MealTickets.deletePersonMealTicket",
        "MealTickets.mealTicketsLegacy",
        "MealTickets.quickBlocksInsert",
        
        /* Vecchio permesso editPersonDay */
		"Absences.blank",
     	"Absences.save",
     	"Absences.edit",
     	"Absences.delete",
     	"Absences.addAttach",
     	"Absences.removeAttach",
        
        "Stampings.blank",
       	"Stampings.edit",
     	"Stampings.save",
     	"Stampings.delete",
     	"Stampings.toggleWorkingHoliday",
     	
     	/* Vecchio permesso editCompetence */
        "Competences.updateCompetence",
        "Competences.saveOvertime",
        "Competences.updatePersonCompetence",
        "Competences.saveNewCompetenceConfiguration",
        
        /* Vecchio permesso uploadSituation */
        "UploadSituation.show",
        "UploadSituation.uploadSituation",
        "UploadSituation.loginAttestati",
        "UploadSituation.processAttestati",
        "UploadSituation.processSinglePerson",
        "UploadSituation.processAllPersons",
        "UploadSituation.showProblems",
        "UploadSituation.showCertificatedData",
        
         /* Vecchio permesso editWorkingTimeType */
        "WorkingTimes.insertWorkingTime",
        "WorkingTimes.save",
        "WorkingTimes.delete",
        "WorkingTimes.toggleWorkingTimeTypeEnabled",
        "WorkingTimes.changeWorkingTimeTypeToAll",
        "WorkingTimes.executeChangeWorkingTimeTypeToAll",
        "WorkingTimes.saveHorizontal",
        
        /* Vecchio permesso editCompetenceCode */
        /* FIXME vedi in regola onlyForPersonnelAdmin_InOffice */
        "Competences.insertCompetenceCode",
        "Competences.edit",
        "Competences.save",      
        
        /* Vecchio permesso editAbsenceCode */
		/* FIXME: stesso ragionamento del editCompetenceCode vedi sotto */
        "Absences.editCode",
        "Absences.insertCode",
     	"Absences.saveCode",
     	"Absences.updateCode",
     	
     	"Configurations.saveConfGeneral",
     	"Configurations.savePatron",
     	"Configurations.saveConfYear",
		"Configurations.savePastYearVacationLimit",
		
		"Badges.joinPersonToBadge",
		"Badges.allocateBadge",
		"Badges.delete",
		"Badges.deleteBadge"
        
        ), target == null, granted == false)
then
 $c.grant();
end

rule OnlyForPersonnelAdmin_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Role(name == "personnelAdmin") from $uro.role
 $c: PermissionCheck(action in (
 		
 		/* Vecchio permesso editPerson */
        "Persons.edit",
        "Persons.update",
        "Persons.save",
     	"Persons.insertUsername",
     	"Persons.updateUsername",
        "Persons.deletePerson",
     	"Persons.deletePersonConfirmed",
     	
        "Contracts.personContracts",
        "Contracts.insert",
        "Contracts.save",
        "Contracts.edit",
        "Contracts.update",
        "Contracts.delete",
        
        "Contracts.updateSourceContract",
     	"Contracts.saveResidualSourceContract",
     	"Contracts.saveMealTicketSourceContract",
		"Contracts.updateContractStampProfile",
        "Contracts.saveContractStampProfile",
        "Contracts.updateContractWorkingTimeType",
        "Contracts.saveContractWorkingTimeType",
     	
     	"Persons.children",
     	"Persons.editChild",
     	"Persons.saveChild",
     	"Persons.insertChild",
     	"Persons.deleteChild",
     	
     	"Persons.workGroup",
     	"Persons.confirmGroup",
     	"Persons.removePersonFromGroup",
   
     	"Persons.updateContractStampProfile",
     	"Persons.splitContractStampProfile",
     	"Persons.changeTypeOfContractStampProfile",
     	"Persons.deleteContractStampProfile",
     	
     	"Persons.modifySendEmail",
     	"Persons.updateSendEmail",
     	
     	"MealTickets.submitPersonMealTicket",
        "MealTickets.deletePersonMealTicket",
        "MealTickets.mealTicketsLegacy",
        "MealTickets.quickBlocksInsert",
        
        /* Vecchio permesso editPersonDay */
 		"Absences.blank",
     	"Absences.save",
     	"Absences.edit",
     	"Absences.delete",
     	"Absences.addAttach",
     	"Absences.removeAttach",
     	
       	"Stampings.blank",
       	"Stampings.edit",
     	"Stampings.save",
     	"Stampings.delete",
     	"Stampings.toggleWorkingHoliday",
     	
     	/* Vecchio permesso editCompetence */
        "Competences.updateCompetence",
        "Competences.saveOvertime",
        "Competences.updatePersonCompetence",
        "Competences.saveNewCompetenceConfiguration",
        
         /* Vecchio permesso uploadSituation */
        "UploadSituation.show",
        "UploadSituation.uploadSituation",
        "UploadSituation.loginAttestati",
        "UploadSituation.processAttestati",
        "UploadSituation.processSinglePerson",
        "UploadSituation.processAllPersons",
        "UploadSituation.showProblems",
        "UploadSituation.showCertificatedData",
        
        /* Vecchio permesso editWorkingTypeType */
        "WorkingTimes.insertWorkingTime",
        "WorkingTimes.save",
        "WorkingTimes.delete",
        "WorkingTimes.toggleWorkingTimeTypeEnabled",
        "WorkingTimes.insertWorkingTime",
        "WorkingTimes.changeWorkingTimeTypeToAll",
        "WorkingTimes.executeChangeWorkingTimeTypeToAll",
        "WorkingTimes.saveHorizontal",
        
        /* Vecchio permesso editCompetenceCode
         *  FIXME: i codici competenza non sono associati all'office. Quindi non ha senso
 	     *  impostare la regola editCompetenceCode_InOffice. O si associano all'office in modo
 	     *  che ogni ufficio possa avere i propri privati (come in workingTimeType) oppure si
 	     *  rimuove questo permesso ai PersonellAdmin e si delega esclusivamente a utente SuperUser.
 	     *  Quest'ultima soluzione potrebbe essere la più opportuna e meno dispendiosa in ottica
 	     *  centralizzazione.
 	     */
        "Competences.insertCompetenceCode",
        "Competences.edit",
        "Competences.save",
        
        /* Vecchio permesso editAbsenceCode */
		/* FIXME: stesso ragionamento del editCompetenceCode*/
        "Absences.editCode",
     	"Absences.insertCode",
     	"Absences.saveCode",
     	"Absences.updateCode",
     	
     	"Configurations.saveConfGeneral",
     	"Configurations.savePatron",
     	"Configurations.saveConfYear",
		"Configurations.savePastYearVacationLimit",
		
		"Badges.joinPersonToBadge",
		"Badges.allocateBadge",
		"Badges.delete",
		"Badges.deleteBadge"
               
       ), target == $o, granted == false)
then
 $c.grant();
end

/*******************************************************************************
 * Azioni utente con ruolo BADGE_READER
 ******************************************************************************/

rule Stampings_create
when
 $uro: UsersRolesOffices()
 $p: Role(name == "badgeReader") from $uro.role
 $c: PermissionCheck(action in (
 
 		/* duplicate */
 		"StampingsFromClient.create",
 		"StampingsFromClient.createNotRecompute",
 		"StampingsFromClient.absence",
 		"StampingsFromClient.absenceNotRecompute"
 		
 		), target == null, granted == false)
 then
 $c.grant();
end

rule Stampings_create_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Role(name == "badgeReader") from $uro.role
 $c: PermissionCheck(action in (
 
 		"StampingsFromClient.create",
 		"StampingsFromClient.createNotRecompute",
 		"StampingsFromClient.absence",
 		"StampingsFromClient.absenceNotRecompute"
 	
 		), target == $o, granted == false)
then
 $c.grant();
end

/*******************************************************************************
 * Azioni utente con ruolo REST_CLIENT
 ******************************************************************************/
rule Rest
when
 $uro: UsersRolesOffices()
 $p: Role(name == "restClient") from $uro.role
 $c: PermissionCheck(action in (
        
        "rest.Persons.days",
        "rest.Persons.missions",
        "rest.Persons.competences",
        "rest.Absences.absencesInPeriod",
        "rest.Absences.insertAbsence",
        "rest.Absences.checkAbsence"
        
       ), target == null, granted == false)
then
 $c.grant();
end

rule Rest_inOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Role(name == "restClient") from $uro.role
 $c: PermissionCheck(action in (

        "rest.Absences.absencesInPeriod",
        "rest.Absences.insertAbsence",
        "rest.Absences.checkAbsence"
        
       ), target == $o, granted == false)
then
 $c.grant();
end

/*******************************************************************************
 * Azioni via REST e iCal per Turni e Reperibilità
 ******************************************************************************/

/**
rule viewShiftICal
when
  $uro: UsersRolesOffices()
  $st: ShiftType(shiftCategories.supervisor == $uro.user || )
  $c: PermissionCheck(action in (
        "Shift.iCal"
       ), target == null, granted == false)
then
 $c.grant();
end
*/

rule ManageShift
when
 $uro: UsersRolesOffices()
 $p: Role(name == "shiftManager") from $uro.role
 $c: PermissionCheck(action in (
        
        "Shift.personList",
        "Shift.timeTable",
        "Shift.find",
        "Shift.update",
        "Shift.exportMonthAsPDF",
        "Shift.exportMonthCalAsPDF",
        "Shift.absence",  
        "Shift.iCal"
       ), target == null, granted == false)
then
 $c.grant();
end

rule ManageReperibility
when
 $uro: UsersRolesOffices()
 $p: Role(name == "reperibilityManager") from $uro.role
 $c: PermissionCheck(action in (
        
        "Reperibility.personList",
        "Reperibility.find",
        "Reperibility.who",
        "Reperibility.absence",
        "Reperibility.whoIsAbsent",
        "Reperibility.update",
        "Reperibility.changePeriods",  
        "Reperibility.exportYearAsPDF", 
        "Reperibility.exportMonthAsPDF",
        "Reperibility.iCal"
        
       ), target == null, granted == false)
then
 $c.grant();
end
