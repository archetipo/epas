package security;
 
import security.PermissionCheck;
import models.Office;
import models.UsersRolesOffices;
import models.ShiftType;
import models.Person;
import models.Role;

global models.User currentOperator;


/* Metodi senza regole
*
*  Administration.createOvertimeFile
*  JsonExport.activePersons
*
*
*
*/

rule AnyUser when
  $c: PermissionCheck(action in (
     	"Application.index",
     	"Version.showVersion"
       ), target == null, granted == false)
then
 $c.grant();
end

/*  
 *	Azioni eseguibili dagli impiegati per visualizzare la propria situazione.
 *  (Ricalca il più possibile la struttura del dropdown menu della persona 
 *  oltre i calendari iCal e le azioni REST)
 */
rule IsEmployee
when
  $uro: UsersRolesOffices()
  $r: Role(name == "employee") from $uro.role
  $c: PermissionCheck(action in (
  		/* Ritorna allo user developer */
     	"Administrators.restoreUser",
     	
     	/* Situazione Mensile */
     	"Stampings.stampings",
     	"Stampings.dailyPresenceForPersonInCharge",
     	"Stampings.editEmployee",
     	"Stampings.updateEmployee",
     	
     	/* Assenze mensili */
     	"Absences.absences",
     	"Absences.absenceInMonth",
     	
     	/* Assenze annuali */
     	"YearlyAbsences.absencesPerPerson",
     	
     	/* Ferie */
     	"Vacations.show",
     	"Vacations.permissionCurrentYear",
     	"Vacations.vacationsCurrentYear",
       	"Vacations.vacationsLastYear",
       	
       	/* Competenze */
     	"Competences.competences",
     	"Competences.monthlyOvertime",
       	
       	/* Riepilogo orario*/
     	"PersonMonths.hourRecap",
     	
     	/* Ore di formazione */
     	"PersonMonths.trainingHours",
     	"PersonMonths.deleteTrainingHours",
     	"PersonMonths.deleteTrainingHoursConfirmed",
     	"PersonMonths.insertTrainingHours",
     	"PersonMonths.insertTrainingHoursPreviousMonth",
     	"PersonMonths.modifyTrainingHours",
     	"PersonMonths.saveTrainingHours",
     	"PersonMonths.updateTrainingHours",
     	
     	/* Modifica password */
     	"Persons.changePassword",
     	"Persons.savePassword",
     	"Persons.resetPassword",
     	
     	/* Stampa cartellino */
     	"PrintTags.showPersonTag",
     	
     	/* 
     	 * Visualizzazione eventuali turni via iCal
     	 * dentro il metodo controllare il permesso di
     	 * visualizzare il calendario specifico richiesto
     	 */
     	"Shift.iCal",
     	"Reperibility.iCal", 
     	
     	/* Metodi rest */
     	"rest.PersonDays.getDaySituation",
     	"rest.PersonDays.getMonthSituation",
     	
     	/* Timbrature web */
     	"Clocks.daySituation",
     	"Clocks.webStamping",
     	"Clocks.insertWebStamping"   	
     	
       ), target == null, granted == false)
then
 $c.grant();
end

/* Azioni eseguibili da qualsiasi utente che abbiano come destinatario 
 * dell'azione se stesso
 */
 
rule HasRightOnHimself
when
  $p: Person(this == currentOperator.person)
  $c: PermissionCheck(target == $p, granted == false)
then
 $c.grant();
end


/* Consente agli amministratori e agli amministratori in sola lettura di avere
 * diritti di visualizzazione su situazioni relative a una specifica persona che
 * appartiene allo stesso ufficio dell'amministratore 
 */
 
rule HasRightOnPerson
when
  $uro: UsersRolesOffices(role.name in("personnelAdmin","personnelAdminMini"))
  $o: Office() from $uro.office
  $c: PermissionCheck($o.persons contains target, granted == false)
then
 $c.grant();
end
  

/*******************************************************************************
 * Azioni utente DEVELOPER
 ******************************************************************************/
rule developer
when
 $uro: UsersRolesOffices()
 Role(name == "developer") from $uro.role
 $c: PermissionCheck( granted == false)
then
 $c.grant();
end

/*******************************************************************************
 * Azioni utente ADMIN
 ******************************************************************************/
rule admin_Generic
when
 $uro: UsersRolesOffices()
 $p: Role(name == "admin") from $uro.role
 $c: PermissionCheck(action in (
 
 		"Offices.editSeat",
        "Offices.updateSeat",
        "Offices.saveSeat",
        "Offices.insertSeat",
        "Offices.saveInstitute",
        "Offices.editInstitute",
        "Offices.insertInstitute",
        "Offices.insertArea",
        
        "Administrators.insertNewAdministrator",
        "Administrators.saveNewAdministrator",
        "Administrators.deleteAdministrator",
        "Administrators.deleteSelfAsAdministrator",
        "Administrators.insertAccountSystem",
        "Administrators.saveAccountSystem",
        "Administrators.deleteAccountSystem",

		/* duplicate */
        "Configurations.saveConfGeneral",
        "Configurations.saveConfYear",
        "Configurations.insertNewConfYear",
        "Configurations.saveNewConfYear",
		"Configurations.savePastYearVacationLimit",
		"Configurations.savePatron",
		
        "Import.officeList"

 		
 		), target == null, granted == false)
 then
 $c.grant();
end

rule admin_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Role(name == "admin") from $uro.role
 $c: PermissionCheck(action in (
 	
 	    "Configurations.saveConfGeneral",
        "Configurations.saveConfYear",
        "Configurations.insertNewConfYear",
        "Configurations.saveNewConfYear",
        "Configurations.savePastYearVacationLimit",
        "Configurations.savePatron"
               
       ), target == $o, granted == false)
then
 $c.grant();
end

/*******************************************************************************
 * Azioni utente con ruolo almeno PERSONNEL_ADMIN_MINI
 ******************************************************************************/

rule alLeastPersonnelAdminMini_Generic
when 
 $uro: UsersRolesOffices()
 $p: Role(name in ("personnelAdmin","personnelAdminMini")) from $uro.role
 $c: PermissionCheck(action in (
        
        /* Vecchio permesso viewPerson */
        "Persons.list",
        "MealTickets.recapMealTickets",
        "MonthRecaps.showRecaps",
        
        /* Vecchio permesso viewPersonDay */
        /* credo che siano comunque da filtrare sull'office 
 		   per cui andrebbero cambiate le action e inserite
 		   in viewPersonDay_InOffice */	
 		"Absences.manageAttachmentsPerCode",
 		
 		"MonthRecaps.show",
 		
 		"Stampings.missingStamping",
        "Stampings.dailyPresence",
        "Stampings.mealTicketSituation",
        
        "YearlyAbsences.showGeneralMonthlyAbsences",
        "YearlyAbsences.yearlyAbsences",
        
        /* Vecchio permesso viewCompetence */
        "Competences.exportCompetences",
        "Competences.getOvertimeInYear",
        "Competences.approvedCompetenceInYear",
        
        /* Vecchio permesso viewOffice 
         *  In questo caso le action non sono inserite all'interno della regola
         *  InOffice poichè i filtri sono all'interno delle stesse action.
         */
        "Offices.showOffices",
        "Configurations.showConfGeneral",
        "Configurations.showConfYear",
        
        /* Vecchio permesso viewCompetenceCode */
        "Competences.manageCompetenceCode",
        
        /*********** duplicate prima di avere il contesto office  *************/
        
        /* Vecchio permesso viewPerson */
        "Persons.showCurrentVacation",
        "Persons.showCurrentContractWorkingTimeType",
        
        "Stampings.holidaySituation",
        "Stampings.personHolidaySituation",
        
        /* Vecchio permesso viewPersonDay */
        "Absences.manageAttachmentsPerPerson",
        "Absences.downloadAttachment",
        "Absences.zipAttachment",
        "Absences.absenceInPeriod",
		
		"Charts.indexCharts",
        "Charts.checkLastYearAbsences",
        "Charts.whichAbsenceInYear",
     	"Charts.overtimeOnPositiveResidual",
     	"Charts.overtimeOnPositiveResidualInYear",
     	"Charts.exportHourAndOvertime",
     	"Charts.export",
     	"Charts.processLastYearAbsences",
     	"Charts.exportDataSituation",
     	"Charts.exportFinalSituation",
		
		"MonthRecaps.justifiedAbsences",
        "MonthRecaps.notJustifiedAbsences",
        "MonthRecaps.workingDayNotHoliday",
        "MonthRecaps.workingDayHoliday",
		
		"PrintTags.listPersonForPrintTags",
        "PrintTags.showTag",
		        
        "Stampings.personStamping",

		"VacationsAdmin.list",        
        "VacationsAdmin.vacationsLastYear",
        "VacationsAdmin.vacationsCurrentYear",
        "VacationsAdmin.permissionCurrentYear",
        
        "YearlyAbsences.showPersonMonthlyAbsences",
        
        /* Vecchio permesso viewCompetence */
        "Competences.showCompetences",
        "Competences.overtime",
        "Competences.totalOvertimeHours",
        "Competences.enabledCompetences",
        "Competences.approvedCompetenceInYear",
        
        /* Vecchio permesso viewWorkingTimeType */
        "WorkingTimes.manageWorkingTime",
        "WorkingTimes.showWorkingTimeType",
        "WorkingTimes.showContractWorkingTimeType",		
        "WorkingTimes.showContract",				
        "WorkingTimes.changeWorkingTimeTypeToAll",
        "WorkingTimes.executeChangeWorkingTimeTypeToAll"
        

        ), target == null, granted == false)
then
 $c.grant();
end

rule alLeastPersonnelAdminMini_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Role(name in ("personnelAdmin","personnelAdminMini")) from $uro.role
 $c: PermissionCheck(action in (
 	
 	   /* Vecchio permesso viewPerson */
 	   "Persons.showCurrentVacation",
       "Persons.showCurrentContractWorkingTimeType",
       
       "MealTickets.recapMealTickets",
       
       "Stampings.holidaySituation",
       "Stampings.personHolidaySituation",	
       
       /* Vecchio permesso viewPersonDay */
        "Absences.manageAttachmentsPerPerson",
        "Absences.downloadAttachment",
        "Absences.zipAttachment",
	    "Absences.absenceInPeriod",
		
		"Charts.indexCharts",
        "Charts.checkLastYearAbsences",
        "Charts.whichAbsenceInYear",
     	"Charts.overtimeOnPositiveResidual",
     	"Charts.overtimeOnPositiveResidualInYear",
     	"Charts.exportHourAndOvertime",
     	"Charts.export",
     	"Charts.processLastYearAbsences",
     	"Charts.exportDataSituation",
     	"Charts.exportFinalSituation",
		
		"MonthRecaps.justifiedAbsences",
        "MonthRecaps.notJustifiedAbsences",
        "MonthRecaps.workingDayNotHoliday",
        "MonthRecaps.workingDayHoliday",
        "PrintTags.listPersonForPrintTags",
        "PrintTags.showTag",
		
        "Stampings.personStamping",
        
        "VacationsAdmin.list",
        "VacationsAdmin.vacationsLastYear",
        "VacationsAdmin.vacationsCurrentYear",
        "VacationsAdmin.permissionCurrentYear",
        
        "YearlyAbsences.showPersonMonthlyAbsences",
        
        /* Vecchio permesso viewCompetence */
        "Competences.showCompetences",
        "Competences.overtime",
        "Competences.totalOvertimeHours",
        "Competences.enabledCompetences",
        "Competences.approvedCompetenceInYear",
        
        /* Vecchio permesso viewWorkingTimeType */
        "WorkingTimes.manageWorkingTime",
        "WorkingTimes.showWorkingTimeType",
        "WorkingTimes.showContractWorkingTimeType",		
        "WorkingTimes.showContract",				
        "WorkingTimes.changeWorkingTimeTypeToAll",
        "WorkingTimes.executeChangeWorkingTimeTypeToAll"
               
       ), target == $o, granted == false)
then
 $c.grant();
end

/*******************************************************************************
 * Azioni utente con ruolo solo PERSONNEL_ADMIN
 ******************************************************************************/

rule onlyForPersonnelAdmin_Generic
when 
 $uro: UsersRolesOffices()
 $p: Role(name == "personnelAdmin") from $uro.role
 $c: PermissionCheck(action in (
 		
 		/* Vecchio permesso editPerson */
        "Persons.insertPerson",
		
		/* Vecchio permesso editAbsenceCode */
		/* FIXME: stesso ragionamento del editCompetenceCode vedi sotto */
		"Absences.manageAbsenceCode",
        
		/*********** duplicate prima di avere il contesto office  *************/   

		/* Vecchio permesso editPerson */
        "Persons.edit",
        "Persons.update",
        "Persons.save",
     	"Persons.insertUsername",
     	"Persons.updateUsername",
        "Persons.deletePerson",
     	"Persons.deletePersonConfirmed",
        
        "Persons.insertContract",
        "Persons.saveContract",
        "Persons.modifyContract",
        "Persons.updateContract",
        "Persons.deleteContract",
        "Persons.deleteContractConfirmed",
        
        "Persons.updateSourceContract",
     	"Persons.saveSourceContract",
     	"Persons.approveAutomatedSource",
     	
     	"Persons.updateContractWorkingTimeType",
     	"Persons.changeTypeOfContractWorkingTimeType",
     	"Persons.splitContractWorkingTimeType",
     	"Persons.deleteContractWorkingTimeType",
     	
     	"Persons.childrenList",
     	"Persons.editChild",
     	"Persons.saveChild",
     	"Persons.insertChild",
     	"Persons.removeChild",
     	"Persons.deleteChild",
     	
     	"Persons.workGroup",
     	"Persons.confirmGroup",
     	"Persons.removePersonFromGroup",
     	
     	"Persons.updateContractStampProfile",
     	"Persons.splitContractStampProfile",
     	"Persons.changeTypeOfContractStampProfile",
     	"Persons.deleteContractStampProfile",
     	
     	"Persons.modifySendEmail",
     	"Persons.updateSendEmail",
     	
     	"WorkingTimes.executeChangeWorkingTimeTypeToAll",
     	
     	"MealTickets.submitPersonMealTicket",
        "MealTickets.deletePersonMealTicket",
        "MealTickets.mealTicketsLegacy",
        "MealTickets.quickBlocksInsert",
        
        /* Vecchio permesso editPersonDay */
		"Absences.create",
     	"Absences.insert",
     	"Absences.edit",
     	"Absences.update",
        
        "Stampings.createStamp",
       	"Stampings.insert",
       	"Stampings.edit",
     	"Stampings.update",
     	"Stampings.toggleWorkingHoliday",
     	
     	/* Vecchio permesso editCompetence */
        "Competences.updateCompetence",
        "Competences.saveOvertime",
        "Competences.updatePersonCompetence",
        "Competences.saveNewCompetenceConfiguration",
        
        /* Vecchio permesso uploadSituation */
        "UploadSituation.show",
        "UploadSituation.uploadSituation",
        "UploadSituation.loginAttestati",
        "UploadSituation.processAttestati",
        "UploadSituation.processSinglePerson",
        "UploadSituation.processAllPersons",
        "UploadSituation.showProblems",
        "UploadSituation.showCertificatedData",
        
         /* Vecchio permesso editWorkingTimeType */
        "WorkingTimes.insertWorkingTime",
        "WorkingTimes.save",
        "WorkingTimes.delete",
        "WorkingTimes.toggleWorkingTimeTypeEnabled",
        
        /* Vecchio permesso editCompetenceCode */
        /* FIXME vedi in regola onlyForPersonnelAdmin_InOffice */
        "Competences.insertCompetenceCode",
        "Competences.edit",
        "Competences.save",      
        
        /* Vecchio permesso editAbsenceCode */
		/* FIXME: stesso ragionamento del editCompetenceCode vedi sotto */
        "Absences.editCode",
        "Absences.insertCode",
     	"Absences.saveCode",
     	"Absences.updateCode",
     	
     	"Configurations.saveConfGeneral",
     	"Configurations.savePatron",
     	"Configurations.saveConfYear",
		"Configurations.savePastYearVacationLimit"
        
        ), target == null, granted == false)
then
 $c.grant();
end

rule onlyForPersonnelAdmin_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Role(name == "personnelAdmin") from $uro.role
 $c: PermissionCheck(action in (
 		
 		/* Vecchio permesso editPerson */
        "Persons.edit",
        "Persons.update",
        "Persons.save",
     	"Persons.insertUsername",
     	"Persons.updateUsername",
        "Persons.deletePerson",
     	"Persons.deletePersonConfirmed",
     	
     	"Persons.insertContract",
        "Persons.saveContract",
        "Persons.modifyContract",
     	"Persons.updateContract",
     	"Persons.deleteContract",
     	"Persons.deleteContractConfirmed",
     	
     	"Persons.updateSourceContract",
     	"Persons.saveSourceContract",
     	"Persons.approveAutomatedSource",
     	
     	"Persons.updateContractWorkingTimeType",
     	"Persons.changeTypeOfContractWorkingTimeType",
     	"Persons.splitContractWorkingTimeType",
     	"Persons.deleteContractWorkingTimeType",
     	
     	"Persons.childrenList",
     	"Persons.editChild",
     	"Persons.saveChild",
     	"Persons.insertChild",
     	"Persons.removeChild",
     	"Persons.deleteChild",
     	
     	"Persons.workGroup",
     	"Persons.confirmGroup",
     	"Persons.removePersonFromGroup",
   
     	"Persons.updateContractStampProfile",
     	"Persons.splitContractStampProfile",
     	"Persons.changeTypeOfContractStampProfile",
     	"Persons.deleteContractStampProfile",
     	
     	"Persons.modifySendEmail",
     	"Persons.updateSendEmail",
     	
     	"WorkingTimes.executeChangeWorkingTimeTypeToAll",
     	
     	"MealTickets.submitPersonMealTicket",
        "MealTickets.deletePersonMealTicket",
        "MealTickets.mealTicketsLegacy",
        "MealTickets.quickBlocksInsert",
        
        /* Vecchio permesso editPersonDay */
        "Absences.create",
     	"Absences.insert",
     	"Absences.edit",
     	"Absences.update",
     	
       	"Stampings.createStamp",
       	"Stampings.insert",
       	"Stampings.edit",
     	"Stampings.update",
     	"Stampings.toggleWorkingHoliday",
     	
     	/* Vecchio permesso editCompetence */
        "Competences.updateCompetence",
        "Competences.saveOvertime",
        "Competences.updatePersonCompetence",
        "Competences.saveNewCompetenceConfiguration",
        
         /* Vecchio permesso uploadSituation */
        "UploadSituation.show",
        "UploadSituation.uploadSituation",
        "UploadSituation.loginAttestati",
        "UploadSituation.processAttestati",
        "UploadSituation.processSinglePerson",
        "UploadSituation.processAllPersons",
        "UploadSituation.showProblems",
        "UploadSituation.showCertificatedData",
        
        /* Vecchio permesso editWorkingTypeType */
        "WorkingTimes.insertWorkingTime",
        "WorkingTimes.save",
        "WorkingTimes.delete",
        "WorkingTimes.toggleWorkingTimeTypeEnabled",
        "WorkingTimes.insertWorkingTime",
        
        /* Vecchio permesso editCompetenceCode
         *  FIXME: i codici competenza non sono associati all'office. Quindi non ha senso
 	     *  impostare la regola editCompetenceCode_InOffice. O si associano all'office in modo
 	     *  che ogni ufficio possa avere i propri privati (come in workingTimeType) oppure si
 	     *  rimuove questo permesso ai PersonellAdmin e si delega esclusivamente a utente SuperUser.
 	     *  Quest'ultima soluzione potrebbe essere la più opportuna e meno dispendiosa in ottica
 	     *  centralizzazione.
 	     */
        "Competences.insertCompetenceCode",
        "Competences.edit",
        "Competences.save",
        
        /* Vecchio permesso editAbsenceCode */
		/* FIXME: stesso ragionamento del editCompetenceCode*/
        "Absences.editCode",
     	"Absences.insertCode",
     	"Absences.saveCode",
     	"Absences.updateCode",
     	
     	"Configurations.saveConfGeneral",
     	"Configurations.savePatron",
     	"Configurations.saveConfYear",
		"Configurations.savePastYearVacationLimit"
               
       ), target == $o, granted == false)
then
 $c.grant();
end

/*******************************************************************************
 * Azioni utente con ruolo BADGE_READER
 ******************************************************************************/

rule stampings_create
when
 $uro: UsersRolesOffices()
 $p: Role(name == "badgeReader") from $uro.role
 $c: PermissionCheck(action in (
 
 		/* duplicate */
 		"StampingsFromClient.create",
 		"StampingsFromClient.createNotRecompute",
 		"StampingsFromClient.absence",
 		"StampingsFromClient.absenceNotRecompute"
 		
 		), target == null, granted == false)
 then
 $c.grant();
end

rule stampings_create_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Role(name == "badgeReader") from $uro.role
 $c: PermissionCheck(action in (
 
 		"StampingsFromClient.create",
 		"StampingsFromClient.createNotRecompute",
 		"StampingsFromClient.absence",
 		"StampingsFromClient.absenceNotRecompute"
 	
 		), target == $o, granted == false)
then
 $c.grant();
end

/*******************************************************************************
 * Azioni utente con ruolo REST_CLIENT
 ******************************************************************************/
rule rest
when
 $uro: UsersRolesOffices()
 $p: Role(name == "restClient") from $uro.role
 $c: PermissionCheck(action in (
        
        "rest.Persons.days",
        "rest.Persons.missions",
        "rest.Persons.competences",
        "rest.Absences.absencesInPeriod",
        "rest.Absences.insertAbsence",
        "rest.Absences.checkAbsence"
        
       ), target == null, granted == false)
then
 $c.grant();
end

rule rest_inOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Role(name == "restClient") from $uro.role
 $c: PermissionCheck(action in (

        "rest.Absences.absencesInPeriod",
        "rest.Absences.insertAbsence",
        "rest.Absences.checkAbsence"
        
       ), target == $o, granted == false)
then
 $c.grant();
end

/*******************************************************************************
 * Azioni via REST e iCal per Turni e Reperibilità
 ******************************************************************************/

/**
rule viewShiftICal
when
  $uro: UsersRolesOffices()
  $st: ShiftType(shiftCategories.supervisor == $uro.user || )
  $c: PermissionCheck(action in (
        "Shift.iCal"
       ), target == null, granted == false)
then
 $c.grant();
end
*/

rule manageShift
when
 $uro: UsersRolesOffices()
 $p: Role(name == "shiftManager") from $uro.role
 $c: PermissionCheck(action in (
        
        "Shift.personList",
        "Shift.timeTable",
        "Shift.find",
        "Shift.update",
        "Shift.exportMonthAsPDF",
        "Shift.exportMonthCalAsPDF",
        "Shift.absence",  
        "Shift.iCal"
       ), target == null, granted == false)
then
 $c.grant();
end

rule manageReperibility
when
 $uro: UsersRolesOffices()
 $p: Role(name == "reperibilityManager") from $uro.role
 $c: PermissionCheck(action in (
        
        "Reperibility.personList",
        "Reperibility.find",
        "Reperibility.who",
        "Reperibility.absence",
        "Reperibility.whoIsAbsent",
        "Reperibility.update",
        "Reperibility.changePeriods",  
        "Reperibility.exportYearAsPDF", 
        "Reperibility.exportMonthAsPDF",
        "Reperibility.iCal"
        
       ), target == null, granted == false)
then
 $c.grant();
end
