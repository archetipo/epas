package security;
 
import security.PermissionCheck;
import models.Office;
import models.UsersRolesOffices;
import models.Permission;

global models.User currentOperator;


/* Metodi senza regole
*
*  Administration.createOvertimeFile
*  JsonExport.activePersons
*
*
*
*/

/*
* rule isPermitted
* when:
* $o: Office()
* $uro: UserRoleOffice(office == $o) from currentUser.userRoleOffices
* $p: Permission(description == "editPersonDay") from $uro.role.permissions
*/

rule AnyUser when
  $c: PermissionCheck(action in (
     	"Application.index",
     	"Version.showVersion"
       ), target == null, granted == false)
then
 $c.grant();
end


/*  
 *	Azioni eseguibili dagli impiegati per visualizzare la propria situazione.
 *  (Ricalca il pi√π possibile la struttura del dropdown menu della persona.)
 */
rule IsEmployee
when
  $uro: UsersRolesOffices()
  $p: Permission(description == "employee") from $uro.role.permissions
  $c: PermissionCheck(action in (
  		/* Ritorna allo user developer */
     	"Administrators.restoreUser",
     	
     	/* Situazione Mensile */
     	"Stampings.stampings",
     	"Stampings.dailyPresenceForPersonInCharge",
     	
     	/* Assenze mensili */
     	"Absences.absences",
     	"Absences.absenceInMonth",
     	
     	/* Assenze annuali */
     	"YearlyAbsences.absencesPerPerson",
     	
     	/* Ferie */
     	"Vacations.show",
     	"Vacations.permissionCurrentYear",
     	"Vacations.vacationsCurrentYear",
       	"Vacations.vacationsLastYear",
       	
       	/* Competenze */
     	"Competences.competences",
     	"Competences.monthlyOvertime",
       	
       	/* Riepilogo orario*/
     	"PersonMonths.hourRecap",
     	
     	/* Ore di formazione */
     	"PersonMonths.trainingHours",
     	"PersonMonths.deleteTrainingHours",
     	"PersonMonths.deleteTrainingHoursConfirmed",
     	"PersonMonths.insertTrainingHours",
     	"PersonMonths.insertTrainingHoursPreviousMonth",
     	"PersonMonths.modifyTrainingHours",
     	"PersonMonths.saveTrainingHours",
     	"PersonMonths.updateTrainingHours",
     	
     	/* Modifica password */
     	"Persons.changePassword",
     	"Persons.savePassword",
     	"Persons.resetPassword",
     	
     	/* Stampa cartellino */
     	"PrintTags.showPersonTag"
     	
       ), target == null, granted == false)
then
 $c.grant();
end

/*
 * Azioni eseguibili da utente con permesso developer (tutto)
 */
rule developer
when
 $uro: UsersRolesOffices()
 $p: Permission(description == "developer") from $uro.role.permissions
 $c: PermissionCheck( granted == false)
then
 $c.grant();
end

/*
 *	Azioni eseguibili da amministratore che detenga il permesso viewPerson
 */
rule viewPerson_Generic
when 
 $uro: UsersRolesOffices()
 $p: Permission(description == "viewPerson") from $uro.role.permissions
 $c: PermissionCheck(action in (
 
        "Persons.list",
        "MealTickets.recapMealTickets",
        "MonthRecaps.showRecaps",
        
        /* duplicate */
        "Persons.showCurrentVacation",
        "Persons.showCurrentContractWorkingTimeType",
        
        "Stampings.holidaySituation",
        "Stampings.personHolidaySituation"
        
        ), target == null, granted == false)
then
 $c.grant();
end

rule viewPerson_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Permission(description == "viewPerson") from $uro.role.permissions
 $c: PermissionCheck(action in (
 		
       "Persons.showCurrentVacation",
       "Persons.showCurrentContractWorkingTimeType",
       
       "MealTickets.recapMealTickets",
       
       "Stampings.holidaySituation",
       "Stampings.personHolidaySituation"
              
       ), target == $o, granted == false)
then
 $c.grant();
end

/*
 *	Azioni eseguibili da amministratore che detenga il permesso editPerson
 */
rule editPerson_Generic
when 
 $uro: UsersRolesOffices()
 $p: Permission(description == "editPerson") from $uro.role.permissions
 $c: PermissionCheck(action in (
 
        "Persons.insertPerson",
		
		/* duplicate */        
        "Persons.edit",
        "Persons.update",
        "Persons.save",
     	"Persons.insertUsername",
     	"Persons.updateUsername",
        "Persons.deletePerson",
     	"Persons.deletePersonConfirmed",
        
        "Persons.insertContract",
        "Persons.saveContract",
        "Persons.modifyContract",
        "Persons.updateContract",
        "Persons.deleteContract",
        "Persons.deleteContractConfirmed",
        
        "Persons.updateSourceContract",
     	"Persons.saveSourceContract",
     	
     	"Persons.updateContractWorkingTimeType",
     	"Persons.changeTypeOfContractWorkingTimeType",
     	"Persons.splitContractWorkingTimeType",
     	"Persons.deleteContractWorkingTimeType",
     	
     	"Persons.childrenList",
     	"Persons.editChild",
     	"Persons.saveChild",
     	"Persons.insertChild",
     	"Persons.removeChild",
     	"Persons.deleteChild",
     	
     	"Persons.workGroup",
     	"Persons.confirmGroup",
     	"Persons.removePersonFromGroup",
     	
     	"Persons.updateContractStampProfile",
     	"Persons.splitContractStampProfile",
     	"Persons.changeTypeOfContractStampProfile",
     	"Persons.deleteContractStampProfile",
     	
     	"Persons.modifySendEmail",
     	"Persons.updateSendEmail",
     	
     	"WorkingTimes.executeChangeWorkingTimeTypeToAll",
     	
     	"MealTickets.submitPersonMealTicket",
        "MealTickets.deletePersonMealTicket",
        "MealTickets.mealTicketsLegacy",
        "MealTickets.quickBlocksInsert"
        
        ), target == null, granted == false)
then
 $c.grant();
end

rule editPerson_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Permission(description == "editPerson") from $uro.role.permissions
 $c: PermissionCheck(action in (
        /* inserire le action interessate */
        "Persons.edit",
        "Persons.update",
        "Persons.save",
     	"Persons.insertUsername",
     	"Persons.updateUsername",
        "Persons.deletePerson",
     	"Persons.deletePersonConfirmed",
     	
     	"Persons.insertContract",
        "Persons.saveContract",
        "Persons.modifyContract",
     	"Persons.updateContract",
     	"Persons.deleteContract",
     	"Persons.deleteContractConfirmed",
     	
     	"Persons.updateSourceContract",
     	"Persons.saveSourceContract",
     	
     	"Persons.updateContractWorkingTimeType",
     	"Persons.changeTypeOfContractWorkingTimeType",
     	"Persons.splitContractWorkingTimeType",
     	"Persons.deleteContractWorkingTimeType",
     	
     	"Persons.childrenList",
     	"Persons.editChild",
     	"Persons.saveChild",
     	"Persons.insertChild",
     	"Persons.removeChild",
     	"Persons.deleteChild",
     	
     	"Persons.workGroup",
     	"Persons.confirmGroup",
     	"Persons.removePersonFromGroup",
   
     	"Persons.updateContractStampProfile",
     	"Persons.splitContractStampProfile",
     	"Persons.changeTypeOfContractStampProfile",
     	"Persons.deleteContractStampProfile",
     	
     	"Persons.modifySendEmail",
     	"Persons.updateSendEmail",
     	
     	"WorkingTimes.executeChangeWorkin/*
 *	Azioni eseguibili da amministratore che detenga il permesso viewPersonDay
 */gTimeTypeToAll",
     	
     	"MealTickets.submitPersonMealTicket",
        "MealTickets.deletePersonMealTicket",
        "MealTickets.mealTicketsLegacy",
        "MealTickets.quickBlocksInsert"
       ), target == $o, granted == false)
then
 $c.grant();
end

/*
 *	Azioni eseguibili da amministratore che detenga il permesso viewPersonDay
 */
rule viewPersonDay_Generic
when 
 $uro: UsersRolesOffices()
 $p: Permission(description == "viewPersonDay") from $uro.role.permissions
 $c: PermissionCheck(  action in (
 		
 		/* credo che siano comunque da filtrare sull'office 
 		   per cui andrebbero cambiate le action e inserite
 		   in viewPersonDay_InOffice */	
 		"Absences.manageAttachmentsPerCode",
 		
 		"MonthRecaps.show",
 		
 		"Stampings.missingStamping",
        "Stampings.dailyPresence",
        "Stampings.mealTicketSituation",
        
        "YearlyAbsences.showGeneralMonthlyAbsences",
        "YearlyAbsences.yearlyAbsences",
        
        /* duplicate */
        "Absences.manageAttachmentsPerPerson",
        "Absences.downloadAttachment",
        "Absences.zipAttachment",
        "Absences.absenceInPeriod",
		
		"Charts.indexCharts",
        "Charts.checkLastYearAbsences",
        "Charts.whichAbsenceInYear",
     	"Charts.overtimeOnPositiveResidual",
     	"Charts.overtimeOnPositiveResidualInYear",
     	"Charts.exportHourAndOvertime",
     	"Charts.export",
     	"Charts.processLastYearAbsences",
     	"Charts.exportDataSituation",
     	"Charts.exportFinalSituation",
		
		"MonthRecaps.justifiedAbsences",
        "MonthRecaps.notJustifiedAbsences",
        "MonthRecaps.workingDayNotHoliday",
        "MonthRecaps.workingDayHoliday",
		
		"PrintTags.listPersonForPrintTags",
        "PrintTags.showTag",
		        
        "Stampings.personStamping",

		"VacationsAdmin.list",        
        "VacationsAdmin.vacationsLastYear",
        "VacationsAdmin.vacationsCurrentYear",
        "VacationsAdmin.permissionCurrentYear",
        
        "YearlyAbsences.showPersonMonthlyAbsences"
        
        ), target == null, granted == false)
then
 $c.grant();
end

rule viewPersonDay_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Permission(description == "viewPersonDay") from $uro.role.permissions
 $c: PermissionCheck(action in (
        /* inserire le action interessate */
        "Absences.manageAttachmentsPerPerson",
        "Absences.downloadAttachment",
        "Absences.zipAttachment",
	    "Absences.absenceInPeriod",
		
		"Charts.indexCharts",
        "Charts.checkLastYearAbsences",
        "Charts.whichAbsenceInYear",
     	"Charts.overtimeOnPositiveResidual",
     	"Charts.overtimeOnPositiveResidualInYear",
     	"Charts.exportHourAndOvertime",
     	"Charts.export",
     	"Charts.processLastYearAbsences",
     	"Charts.exportDataSituation",
     	"Charts.exportFinalSituation",
		
		"MonthRecaps.justifiedAbsences",
        "MonthRecaps.notJustifiedAbsences",
        "MonthRecaps.workingDayNotHoliday",
        "MonthRecaps.workingDayHoliday",
        "PrintTags.listPersonForPrintTags",
        "PrintTags.showTag",
		
        "Stampings.personStamping",
        
        "VacationsAdmin.list",
        "VacationsAdmin.vacationsLastYear",
        "VacationsAdmin.vacationsCurrentYear",
        "VacationsAdmin.permissionCurrentYear",
        
        "YearlyAbsences.showPersonMonthlyAbsences"
        
       ), target == $o, granted == false)
then
 $c.grant();
end

/*
 *	Azioni eseguibili da amministratore che detenga il permesso editPersonDay
 */
rule editPersonDay_Generic
when 
 $uro: UsersRolesOffices()
 $p: Permission(description == "editPersonDay") from $uro.role.permissions
 $c: PermissionCheck(action in (
       	/*duplicate */
        "Absences.create",
     	"Absences.insert",
     	"Absences.edit",
     	"Absences.update",
        
        "Stampings.createStamp",
       	"Stampings.insert",
       	"Stampings.edit",
     	"Stampings.update",
     	"Stampings.toggleWorkingHoliday"
     	
        ), target == null, granted == false)
then
 $c.grant();
end


rule editPersonDay_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Permission(description == "editPersonDay") from $uro.role.permissions
 $c: PermissionCheck(action in (
        "Absences.create",
     	"Absences.insert",
     	"Absences.edit",
     	"Absences.update",
     	
       	"Stampings.createStamp",
       	"Stampings.insert",
       	"Stampings.edit",
     	"Stampings.update",
     	"Stampings.toggleWorkingHoliday"
     	
       ), target == $o, granted == false)
then
 $c.grant();
end


/*
 *	Azioni eseguibili da amministratore che detenga il permesso viewCompetence
 */
rule viewCompetence_Generic
when 
 $uro: UsersRolesOffices()
 $p: Permission(description == "viewCompetence") from $uro.role.permissions
 $c: PermissionCheck(action in (
        
        "Competences.exportCompetences",
        "Competences.getOvertimeInYear",
        "Competences.approvedCompetenceInYear",
        
        /* duplicate */
        "Competences.showCompetences",
        "Competences.overtime",
        "Competences.totalOvertimeHours",
        "Competences.enabledCompetences",
        "Competences.approvedCompetenceInYear"
        
        ), target == null, granted == false)
then
 $c.grant();
end

rule viewCompetence_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Permission(description == "viewCompetence") from $uro.role.permissions
 $c: PermissionCheck(action in (
        
        "Competences.showCompetences",
        "Competences.overtime",
        "Competences.totalOvertimeHours",
        "Competences.enabledCompetences",
        "Competences.approvedCompetenceInYear"
        
       ), target == $o, granted == false)
then
 $c.grant();
end

/*
 *	Azioni eseguibili da amministratore che detenga il permesso editCompetence
 */
rule editCompetence_Generic
when 
 $uro: UsersRolesOffices()
 $p: Permission(description == "editCompetence") from $uro.role.permissions
 $c: PermissionCheck(action in (
        
        /* duplicate */
        "Competences.updateCompetence",
        "Competences.saveOvertime",
        "Competences.updatePersonCompetence",
        "Competences.saveNewCompetenceConfiguration"
        
        ), target == null, granted == false)
then
 $c.grant();
end

rule editCompetence_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Permission(description == "editCompetence") from $uro.role.permissions
 $c: PermissionCheck(action in (
        
        "Competences.updateCompetence",
        "Competences.saveOvertime",
        "Competences.updatePersonCompetence",
        "Competences.saveNewCompetenceConfiguration"
        
       ), target == $o, granted == false)
then
 $c.grant();
end


/*
 *	Azioni eseguibili da amministratore che detenga il permesso uploadSituation
 */
rule uploadSituation_Generic
when 
 $uro: UsersRolesOffices()
 $p: Permission(description == "uploadSituation") from $uro.role.permissions
 $c: PermissionCheck(action in (
        
        /* duplicate */
        "UploadSituation.show",
        "UploadSituation.uploadSituation",
        "UploadSituation.loginAttestati",
        "UploadSituation.processAttestati",
        "UploadSituation.processSinglePerson",
        "UploadSituation.processAllPersons",
        "UploadSituation.showProblems",
        "UploadSituation.showCertificatedData"      
        
        ), target == null, granted == false)
then
 $c.grant();
end
 
rule uploadSituation_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Permission(description == "uploadSituation") from $uro.role.permissions
 $c: PermissionCheck(action in (
        /* inserire le action interessate */
        "UploadSituation.show",
        "UploadSituation.uploadSituation",
        "UploadSituation.loginAttestati",
        "UploadSituation.processAttestati",
        "UploadSituation.processSinglePerson",
        "UploadSituation.processAllPersons",
        "UploadSituation.showProblems",
        "UploadSituation.showCertificatedData"        
       ), target == $o, granted == false)
then
 $c.grant();
end




/*
 *	Azioni eseguibili da amministratore che detenga il permesso viewOffice
 *  In questo caso la regola viewOffice_InOffice non √® implementata
 *  poich√® i filtri sono all'interno dell'action.
 */
rule viewOffice_Generic
when 
 $uro: UsersRolesOffices()
 $p: Permission(description == "viewOffice") from $uro.role.permissions
 $c: PermissionCheck(action in (
      
        "Offices.showOffices",
        
        "Configurations.showConfGeneral",
        "Configurations.showConfYear"

        ), target == null, granted == false)
then
 $c.grant();
end

/*
 *	Azioni eseguibili da amministratore che detenga il permesso editOffice
 */
rule editOffice_Generic
when 
 $uro: UsersRolesOffices()
 $p: Permission(description == "editOffice") from $uro.role.permissions
 $c: PermissionCheck(action in (
        
        "Offices.editSeat",
        "Offices.updateSeat",
        "Offices.saveSeat",
        "Offices.insertSeat",
        "Offices.saveInstitute",
        "Offices.editInstitute",
        "Offices.insertInstitute",
        "Offices.insertArea",
        
        "Administrators.insertNewAdministrator",
        "Administrators.saveNewAdministrator",
        "Administrators.deleteAdministrator",
        "Administrators.deleteSelfAsAdministrator",
        "Administrators.insertAccountSystem",
        "Administrators.saveAccountSystem",
        "Administrators.deleteAccountSystem",

        "Configurations.saveConfGeneral",
        "Configurations.saveConfYear",
        "Configurations.insertNewConfYear",
        "Configurations.saveNewConfYear",

        "Import.officeList"

        ), target == null, granted == false)
then
 $c.grant();
end

rule editOffice_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Permission(description == "editOffice") from $uro.role.permissions
 $c: PermissionCheck(action in (
        
        "Configurations.saveConfGeneral",
        "Configurations.saveConfYear",
        "Configurations.insertNewConfYear",
        "Configurations.saveNewConfYear"
        
       ), target == $o, granted == false)
then
 $c.grant();
end

/*
 *	Azioni eseguibili da amministratore che detenga il permesso viewWorkingTimeType
 */
rule viewWorkingTimeType_Generic
when 
 $uro: UsersRolesOffices()
 $p: Permission(description == "viewWorkingTimeType") from $uro.role.permissions
 $c: PermissionCheck(action in (
        
        
        
        /* duplicate */
        "WorkingTimes.manageWorkingTime",
        "WorkingTimes.showWorkingTimeType",
        "WorkingTimes.showContractWorkingTimeType",		/* forse √® viewPerson */
        "WorkingTimes.showContract",					/* forse √® viewPerson */
        "WorkingTimes.changeWorkingTimeTypeToAll",
        "WorkingTimes.executeChangeWorkingTimeTypeToAll"
        
        ), target == null, granted == false)
then
 $c.grant();
end


rule viewWorkingTimeType_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Permission(description == "viewWorkingTimeType") from $uro.role.permissions
 $c: PermissionCheck(action in (
        
        "WorkingTimes.manageWorkingTime",
        "WorkingTimes.showWorkingTimeType",
        "WorkingTimes.showContractWorkingTimeType",		/* forse √® viewPerson */
        "WorkingTimes.showContract",					/* forse √® viewPerson */
        "WorkingTimes.changeWorkingTimeTypeToAll",
        "WorkingTimes.executeChangeWorkingTimeTypeToAll"
        
       ), target == $o, granted == false)
then
 $c.grant();
end



/*
 *	Azioni eseguibili da amministratore che detenga il permesso editWorkingTimeType
 */
rule editWorkingTimeType_Generic
when 
 $uro: UsersRolesOffices()
 $p: Permission(description == "editWorkingTimeType") from $uro.role.permissions
 $c: PermissionCheck(action in (
        
        /* duplicate */
        "WorkingTimes.insertWorkingTime",
        "WorkingTimes.save",
        "WorkingTimes.delete",
        "WorkingTimes.toggleWorkingTimeTypeEnabled",
        "WorkingTimes.insertWorkingTime"
        
        ), target == null, granted == false)
then
 $c.grant();
end
 
rule editWorkingTimeType_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Permission(description == "editWorkingTimeType") from $uro.role.permissions
 $c: PermissionCheck(action in (
 
        "WorkingTimes.insertWorkingTime",
        "WorkingTimes.save",
        "WorkingTimes.delete",
        "WorkingTimes.toggleWorkingTimeTypeEnabled",
        "WorkingTimes.insertWorkingTime"
        
       ), target == $o, granted == false)
then
 $c.grant();
end


/*
 *	Azioni eseguibili da amministratore che detenga il permesso viewCompetenceCode.
 */
rule viewCompetenceCode_Generic
when 
 $uro: UsersRolesOffices()
 $p: Permission(description == "viewCompetenceCode") from $uro.role.permissions
 $c: PermissionCheck(action in (
        
        "Competences.manageCompetenceCode"
        
        ), target == null, granted == false)
then
 $c.grant();
end


/*
 *	Azioni eseguibili da amministratore che detenga il permesso editCompetenceCode.
 *
 *  FIXME: i codici competenza non sono associati all'office. Quindi non ha senso
 *  impostare la regola editCompetenceCode_InOffice. O si associano all'office in modo
 *  che ogni ufficio possa avere i propri privati (come in workingTimeType) oppure si
 *  rimuove questo permesso ai PersonellAdmin e si delega esclusivamente a utente SuperUser.
 *  Quest'ultima soluzione potrebbe essere la pi√π opportuna e meno dispendiosa in ottica
 *  centralizzazione.
 */
rule editCompetenceCode_Generic
when 
 $uro: UsersRolesOffices()
 $p: Permission(description == "editCompetenceCode") from $uro.role.permissions
 $c: PermissionCheck(action in (
        
        /* duplicate */
        "Competences.insertCompetenceCode",
        "Competences.edit",
        "Competences.save"
        
        ), target == null, granted == false)
then
 $c.grant();
end

rule editCompetenceCode_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Permission(description == "editCompetenceCode") from $uro.role.permissions
 $c: PermissionCheck(action in (
        
        "Competences.insertCompetenceCode",
        "Competences.edit",
        "Competences.save"
        
       ), target == $o, granted == false)
then
 $c.grant();
end


/*
 *	Azioni eseguibili da amministratore che detenga il permesso editAbsenceType
 *  FIXME: vedi fixme precedente.
 */
rule editAbsenceType_Generic
when 
 $uro: UsersRolesOffices()
 $p: Permission(description == "editAbsenceType") from $uro.role.permissions
 $c: PermissionCheck(action in (
 
        "Absences.manageAbsenceCode",
        
        /* duplicate */
        "Absences.editCode",
        "Absences.insertAbsenceCode",
     	"Absences.saveAbsenceCode",
     	"Absences.updateCode"
        
        ), target == null, granted == false)
then
 $c.grant();
end

rule editAbsenceCode_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Permission(description == "editAbsenceType") from $uro.role.permissions
 $c: PermissionCheck(action in (
       
        "Absences.editCode",
     	"Absences.insertAbsenceCode",
     	"Absences.saveAbsenceCode",
     	"Absences.updateCode"
     	
       ), target == $o, granted == false)
then
 $c.grant();
end

/*******************************************************************************
 * Azioni via REST. Protime
 ******************************************************************************/
 
rule rest
when
 $uro: UsersRolesOffices()
 $p: Permission(description == "rest") from $uro.role.permissions
 $c: PermissionCheck(action in (
        
        "rest.Persons.days",
        "rest.Persons.missions",
        "rest.Persons.competences",
        "rest.Absences.absencesInPeriod",
        "rest.Absences.insertAbsence"
        
       ), target == null, granted == false)
then
 $c.grant();
end

/*******************************************************************************
 * Azioni via REST. Client Timbrature
 ******************************************************************************/

rule stampings_create
when
 $uro: UsersRolesOffices()
 $p: Permission(description == "stampingsCreate") from $uro.role.permissions
 $c: PermissionCheck(action in (
 
 		/* duplicate */
 		"StampingsFromClient.create"
 		
 		), target == null, granted == false)
 then
 $c.grant();
end

rule stampings_create_InOffice
when
 $uro: UsersRolesOffices()
 $o: Office( usersRolesOffices contains $uro)
 $p: Permission(description == "stampingsCreate") from $uro.role.permissions
 $c: PermissionCheck(action in (
 
 		"StampingsFromClient.create"
 	
 		), target == $o, granted == false)
then
 $c.grant();
end
